ps -eo %mem,%cpu,pid,ppid,cmd --sort=-%mem | head

/*
If a script expects a command-line parameter but is invoked without one, this may cause a null variable assignment, generally an undesirable result. One way to prevent this is to append an extra character to both sides of the assignment statement using the expected positional parameter.

variable1_=$1_  # Rather than variable1=$1
# This will prevent an error, even if positional parameter is absent.

critical_argument01=$variable1_

# The extra character can be stripped off later, like so.
variable1=${variable1_/_/}
# Side effects only if $variable1_ begins with an underscore.
# This uses one of the parameter substitution templates discussed later.
# (Leaving out the replacement pattern results in a deletion.)

#  A more straightforward way of dealing with this is
#+ to simply test whether expected positional parameters have been passed.
if [ -z $1 ]
then
  exit $E_MISSING_POS_PARAM
fi

#  However, as Fabian Kreutz points out,
#+ the above method may have unexpected side-effects.
#  A better method is parameter substitution:
#         ${1:-$DefaultVal}
#  See the "Parameter Substition" section
#+ in the "Variables Revisited" chapter.
*/

c/c++ make generate object file in separate directory

#wildcard autocomplete 
#/etc/profile
set -o GLOB_COMPLETE #err!
set completion-ignore-case on

~/.inputrc:
set show-all-if-ambiguous on
#!/usr/bin/env bash
shopt -s extglob   # and others, such as nullglob dotglob
shopt -s dotglob nullglob
shopt -s failglob
shopt -s globstar

sudo ufw allow 139/tcp
sudo ufw allow 445/tcp
sudo ufw allow 137/udp
sudo ufw allow 138/udp
sudo ufw reject 139/tcp
sudo ufw reject 445/tcp
sudo ufw reject 137/udp
sudo ufw reject 138/udp

ipp://192.168.1.140:631/ipp

#MAC -> IP
nmap -sP 192.168.1.0/24 >/dev/null && arp -an | grep 1b:a9:f1:b4:8f | awk '{print $2}' | sed 's/[()]//g'
nmap -sP 192.168.1.0/24 >/dev/null && arp -an | grep 1b-a9-f1-b4-8f | awk '{print $2}' | sed 's/[()]//g'

shopt extglob

~/.inputrc

chsh -s /bin/zsh
chsh -s /bin/zsh <usr>

firefox-esr -private

http://c.learncodethehardway.org/book/ex20.html

#Systemd
#http://www.howtogeek.com/216454/how-to-manage-systemd-services-on-a-linux-system/
systemd --version

systemctl status cups.service
systemctl start cups.service 

gnome-terminal --tab-with-profile=Unnamed --working-directory=/home/x --tab-with-profile=Unnamed --working-directory=/home/x/work

#$/etc/init.d/postgresql start
#[ ok ] Starting postgresql (via systemctl): postgresql.service.

systemctl start postgresql.service

#book
Get a Job, Build a Real Career, and Defy a Bewildering Economy

➜  xrc whereis sqlite
sqlite: /usr/bin/sqlite /usr/share/man/man1/sqlite.1.gz
➜  xrc file /usr/bin/sqlite
/usr/bin/sqlite: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=2a525971bb453b5055027afe95874abf3b94f530, stripped
➜  xrc whereis sqlite3
sqlite3: /usr/bin/sqlite3 /usr/share/man/man1/sqlite3.1.gz
➜  xrc file /usr/bin/sqlite3 
/usr/bin/sqlite3: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=27fb684767059284231748075dd874bed1837485, stripped

FUD (fully undetecable) #backdoor with msfvenom ( part of metasploit framework )
Fear, uncertainty and doubt (often shortened to FUD) is a disinformation strategy used in sales, marketing, public relations, politics and propaganda. FUD is generally a strategy to influence perception by disseminating negative and dubious or false information and a manifestation of the appeal to fear.

#wingod
GodMode.{ED7BA470-8E54-465E-825C-99712043E01C}

#windir
%systemroot%/SysWOW64

#list all group in linux
cut -d: -f1 /etc/group | sort

