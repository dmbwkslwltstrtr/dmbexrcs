~/.vimrc
" tabstop:          Width of tab character
" softtabstop:      Fine tunes the amount of white space to be added
" shiftwidth        Determines the amount of whitespace to add in normal mode
" expandtab:        When on uses space instead of tabs
set tabstop     =4
set softtabstop =4
set shiftwidth  =4
set expandtab

#tab -> space
:%s/^\s\{2,}/  /

#move { to function signature line
:%s/)\s*\(.*\)\s*\r*\n\s*{\s*/) { \1/

.,$s/\n/\rgit pull\r/

%g/^.\{-,5}$/d
#read range of lines from a file into current buffer
:r !sed -n 24,410p ~/Downloads/Ex_files_Creating_a_website_using__Bootstrap/wiredwiki.html

#oros(Русский) --> oros\(Русский\)
%s/\([(|)]\)/\\\1/g

:sort u (Uniq - Removing duplicate lines, sort all lines and remove duplicates (keeping unique lines))

#replace space with new line
Use Control-v and then Enter key instead of \n. Control-v is the special character escape key.

#insert timestamp in Vim
:r! date "+\%Y-\%m-\%d \%H:\%M:\%S"
:r !date +%F
The above commands insert the output of the date program after the current line. If wanted, the !! command can be used to filter the current line, replacing it with the output of date.

W: Move forward a WORD (any non-whitespace characters).

#system clipboard
Vim has extended vi to allow use of the * register as a reference to the system clipboard. So we can use normal mode commands like: "*dd or 1G"*yG to copy things into the * register and "*p to paste text from it. We can also use this * register with the ex yank command, so :%y * will accomplish the same goal as gg"*yG (copy all text into the system clipboard so it can be pasted into an X or MS Windows application).
e.g.
nnoremap <C-Tab> :bn<CR>  #buffer next
nnoremap <C-S-Tab> :bp<CR>  #buffer previous
vim ~/.zshrc ~/.zsh-func

X11-clipboard support in terminal
Getting Vim to work with the X11 clipboard can be a struggle, at least when you like to run Vim in a terminal. The GUI version of Vim always has clipboard support, however, if you like to use Vim from a terminal, you will have to check for X11-clipboard support.

From the console, type:

% vim --version
If you see "+xterm_clipboard", you are good to go. If it's "-xterm_clipboard", you will need to look for a version of Vim that was compiled with clipboard support.

u: undo last change (can be repeated to undo preceding commands)
Ctrl-R: Redo changes which were undone (undo the undos). Compare to '.' to repeat a previous change, at the current cursor position. Ctrl-R will redo a previously undone change, wherever the change occurred.
A related command is:
U: return the last line which was modified to its original state (reverse all changes in last modified line)
U is not actually a true "undo" command as it does not actually navigate undo history like u and CTRL-R. This means that (somewhat confusingly) U is itself undo-able with u; it creates a new change to reverse previous changes.
U is seldom useful in practice, but is often accidentally pressed instead of u, so it is good to know about.

#delete non-contiguous duplicate lines without sort
$ awk '!a[$0]++' file
#vim uniq preserve order
:%!awk '\!a[$0]++'

#vim global command :g
:[range]g/pattern/cmd

#Vim Uppercase & Lowercase
Convert a visual selection to all uppercase letters.
gU
Convert to lowercase letters
gu
uppercase until end of word:
gUw
Or, two words:
gU2w
Or, end of the line:
gU$
Or, next 10 characters:
gU10l
to change all UPPERCASE letters to lowercase letters in a file:
ggguGG
or
:%s/[A-Z]/\L&/g

:[range]s/\s*\[\|\]//g

[[ "$1" =~ *error* ]] :failed to compile regex: Invalid preceding regular expression

:%s/\($?\)/'&':&/gc (& : the whole matched pattern)

